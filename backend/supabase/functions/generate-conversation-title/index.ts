import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { Anthropic } from 'https://esm.sh/@anthropic-ai/sdk@0.24.3'
import { ConversationManager, type Conversation } from '../_shared/conversation-manager.ts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface TitleGenerationRequest {
  conversation_id: string;
  user_id: string;
}

const TITLE_GENERATION_PROMPT = `You are a helpful assistant that generates concise conversation titles.

Your task: Analyze the conversation below and generate a short, descriptive title (3-6 words) that captures the main topic or theme.

Guidelines:
- Keep it concise (3-6 words maximum)
- Focus on the main subject being discussed
- Use professional but natural language
- Avoid generic phrases like "Conversation about" or "Discussion on"
- Make it specific enough to be meaningful

Examples:
- "Performance review preparation"
- "Team restructuring options"
- "Sarah's career development"
- "Project deadline concerns"
- "Difficult client feedback"
- "1:1 meeting planning"

Conversation to analyze:
{conversation_content}

Respond with ONLY the title, nothing else.`;

async function generateConversationTitle(conversationId: string, userId: string, supabase: any, anthropic: any): Promise<string | null> {
  try {
    console.log('üè∑Ô∏è Generating title for conversation:', conversationId);

    // Get conversation messages
    const { data: messages, error: messagesError } = await supabase
      .from('messages')
      .select('content, is_user, created_at')
      .eq('conversation_id', conversationId)
      .order('created_at', { ascending: true })
      .limit(10); // Only use first 10 messages for title generation

    if (messagesError || !messages || messages.length === 0) {
      console.error('‚ùå Failed to fetch messages for title generation:', messagesError);
      return null;
    }

    // Format conversation content for analysis
    const conversationContent = messages
      .map((msg: any) => `${msg.is_user ? 'Manager' : 'Mano'}: ${msg.content}`)
      .join('\n\n');

    console.log('üìù Conversation content preview:', conversationContent.substring(0, 200) + '...');

    // Generate title using Claude
    const response = await anthropic.messages.create({
      model: 'claude-sonnet-4-20250514',
      max_tokens: 20,
      system: TITLE_GENERATION_PROMPT.replace('{conversation_content}', conversationContent),
      messages: [
        {
          role: 'user',
          content: 'Generate a title for this conversation.'
        }
      ]
    });

    const textContent = response.content.find((block: any) => block.type === 'text');
    const generatedTitle = textContent?.text?.trim();

    if (!generatedTitle) {
      console.error('‚ùå No title generated by Claude');
      return null;
    }

    console.log('‚úÖ Generated title:', generatedTitle);
    return generatedTitle;

  } catch (error) {
    console.error('‚ùå Error generating conversation title:', error);
    return null;
  }
}

serve(async (req) => {
  console.log('üè∑Ô∏è Title generation function called:', {
    method: req.method,
    url: req.url,
    timestamp: new Date().toISOString()
  });

  // Handle CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Initialize clients
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    const anthropic = new Anthropic({
      apiKey: Deno.env.get('ANTHROPIC_API_KEY')!,
    })

    // Parse request body
    const { conversation_id, user_id }: TitleGenerationRequest = await req.json()

    if (!conversation_id || !user_id) {
      return new Response(JSON.stringify({ error: 'conversation_id and user_id are required' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }

    // Verify conversation belongs to user by checking the person
    const { data: conversation, error: convError } = await supabase
      .from('conversations')
      .select(`
        *,
        people!inner(user_id)
      `)
      .eq('id', conversation_id)
      .eq('people.user_id', user_id)
      .single()

    if (convError || !conversation) {
      console.error('‚ùå Conversation not found or not authorized:', convError);
      return new Response(JSON.stringify({ error: 'Conversation not found' }), {
        status: 404,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }

    // Check if conversation already has a title
    if (conversation.title && conversation.title.trim() !== '' && !conversation.title.startsWith('Conversation with')) {
      console.log('‚ÑπÔ∏è Conversation already has a custom title:', conversation.title);
      return new Response(JSON.stringify({
        success: true,
        title: conversation.title,
        message: 'Conversation already has a title'
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }

    // Generate the title
    const generatedTitle = await generateConversationTitle(conversation_id, user_id, supabase, anthropic);

    if (!generatedTitle) {
      return new Response(JSON.stringify({ error: 'Failed to generate title' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }

    // Update conversation with generated title
    const conversationManager = new ConversationManager(supabase, user_id);
    await conversationManager.updateConversationTitle(conversation_id, generatedTitle);

    console.log('‚úÖ Title generation complete:', generatedTitle);

    return new Response(JSON.stringify({
      success: true,
      title: generatedTitle,
      conversation_id: conversation_id
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })

  } catch (error) {
    console.error('‚ùå Error in title generation function:', error)
    return new Response(JSON.stringify({ error: 'Internal server error' }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })
  }
})