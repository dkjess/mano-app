import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { Anthropic } from 'https://esm.sh/@anthropic-ai/sdk@0.24.3'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface TitleGenerationRequest {
  message_id: string;
  user_id: string;
}

const TITLE_GENERATION_PROMPT = `You are a helpful assistant that generates concise titles for coaching advice.

Your task: Analyze the coaching advice below and generate a short, descriptive title (3-6 words) that captures the key insight or topic.

Guidelines:
- Keep it concise (3-6 words maximum)
- Focus on the main advice or topic
- Use professional but natural language
- Make it actionable or topic-focused
- Avoid generic phrases like "Advice about" or "Tips for"

Examples:
- "Handling difficult feedback conversations"
- "Building trust with new reports"
- "Delegating high-stakes projects"
- "Managing team conflict effectively"
- "Preparing for performance reviews"
- "Navigating organizational change"

Coaching advice to analyze:
{message_content}

Respond with ONLY the title, nothing else.`;

async function generatePinnedMessageTitle(messageId: string, userId: string, supabase: any, anthropic: any): Promise<string | null> {
  try {
    console.log('üìå Generating title for pinned message:', messageId);

    // Get the message content
    const { data: message, error: messageError } = await supabase
      .from('messages')
      .select('content, is_user')
      .eq('id', messageId)
      .single();

    if (messageError || !message) {
      console.error('‚ùå Failed to fetch message for title generation:', messageError);
      return null;
    }

    // Only generate titles for AI messages (not user messages)
    if (message.is_user) {
      console.log('‚ÑπÔ∏è Skipping title generation for user message');
      return 'User Message';
    }

    const messageContent = message.content;
    console.log('üìù Message content preview:', messageContent.substring(0, 200) + '...');

    // Generate title using Claude
    const response = await anthropic.messages.create({
      model: 'claude-sonnet-4-5-20250929',
      max_tokens: 20,
      system: TITLE_GENERATION_PROMPT.replace('{message_content}', messageContent),
      messages: [
        {
          role: 'user',
          content: 'Generate a title for this coaching advice.'
        }
      ]
    });

    const textContent = response.content.find((block: any) => block.type === 'text');
    const generatedTitle = textContent?.text?.trim();

    if (!generatedTitle) {
      console.error('‚ùå No title generated by Claude');
      return null;
    }

    console.log('‚úÖ Generated title:', generatedTitle);
    return generatedTitle;

  } catch (error) {
    console.error('‚ùå Error generating pinned message title:', error);
    return null;
  }
}

serve(async (req) => {
  console.log('üìå Pinned title generation function called:', {
    method: req.method,
    url: req.url,
    timestamp: new Date().toISOString()
  });

  // Handle CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Initialize clients
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    const anthropic = new Anthropic({
      apiKey: Deno.env.get('ANTHROPIC_API_KEY')!,
    })

    // Parse request body
    const { message_id, user_id }: TitleGenerationRequest = await req.json()

    if (!message_id || !user_id) {
      return new Response(JSON.stringify({ error: 'message_id and user_id are required' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }

    // Verify pinned message exists and belongs to user
    const { data: pinnedMessage, error: pinnedError } = await supabase
      .from('pinned_messages')
      .select('id, title')
      .eq('message_id', message_id)
      .eq('user_id', user_id)
      .single()

    if (pinnedError || !pinnedMessage) {
      console.error('‚ùå Pinned message not found or not authorized:', pinnedError);
      return new Response(JSON.stringify({ error: 'Pinned message not found' }), {
        status: 404,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }

    // Check if pinned message already has a title
    if (pinnedMessage.title && pinnedMessage.title.trim() !== '') {
      console.log('‚ÑπÔ∏è Pinned message already has a title:', pinnedMessage.title);
      return new Response(JSON.stringify({
        success: true,
        title: pinnedMessage.title,
        message: 'Pinned message already has a title'
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }

    // Generate the title
    const generatedTitle = await generatePinnedMessageTitle(message_id, user_id, supabase, anthropic);

    if (!generatedTitle) {
      return new Response(JSON.stringify({ error: 'Failed to generate title' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }

    // Update pinned message with generated title
    const { error: updateError } = await supabase
      .from('pinned_messages')
      .update({ title: generatedTitle })
      .eq('message_id', message_id)
      .eq('user_id', user_id);

    if (updateError) {
      console.error('‚ùå Failed to update pinned message with title:', updateError);
      return new Response(JSON.stringify({ error: 'Failed to save title' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }

    console.log('‚úÖ Title generation complete:', generatedTitle);

    return new Response(JSON.stringify({
      success: true,
      title: generatedTitle,
      message_id: message_id
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })

  } catch (error) {
    console.error('‚ùå Error in pinned title generation function:', error)
    return new Response(JSON.stringify({ error: 'Internal server error' }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })
  }
})
